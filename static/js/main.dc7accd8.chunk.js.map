{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","d","getTrProps","rowInfo","column","instance","style","color","row","machine_info","application_info","fetchData","_callee","regenerator_default","a","wrap","_context","prev","next","axios","get","then","res","console","log","_this","setState","stop","this","_this2","interval","setInterval","data","clearInterval","_this3","columns","Header","accessor","width","Cell","props","react_default","createElement","className","Date","length","timestamp","toString","substring","value","es","nodes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc7accd8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ReactTable from \"react-table\";\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    d: '',\r\n}\r\n\r\ngetTrProps = (state, rowInfo, column, instance) => {\r\n  if (rowInfo) {\r\n    return {\r\n      style: {\r\n        color: (!rowInfo.row.machine_info) ? 'red' : (rowInfo.row.application_info) ? 'black' : 'orange'\r\n      }\r\n    }\r\n  }\r\n  return {};\r\n}\r\n\r\nfetchData = async () => {\r\n  axios.get('https://cpen431monitor.herokuapp.com/getData')\r\n        .then(res => {\r\n            console.log(res)\r\n            this.setState({d: res})\r\n            return res\r\n        })\r\n}\r\n\r\ncomponentDidMount() {\r\n  this.interval = setInterval(() => this.fetchData(data => this.setState({ d: data })), 1000);\r\n}\r\n\r\ncomponentWillUnmount() {\r\n  clearInterval(this.interval);\r\n}\r\n\r\n  render (){\r\n    const columns = [\r\n    {\r\n      Header: 'Application Timestamp',\r\n      accessor: 'timestamp',\r\n      width: '220',\r\n      Cell: props => <span className='string'>{new Date(this.state.d.data[this.state.d.data.length-1].timestamp).toString().substring(0,25)}</span> // Custom cell components!\r\n    },\r\n    {\r\n      Header: 'Node Hostname',\r\n      accessor: 'id' ,\r\n      width: '250',\r\n      Cell: props => <span className='string'>{props.value}</span>\r\n    },{\r\n      Header: 'Node Status',\r\n      accessor: 'machine_info',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{(props.value) ? \"Alive\" : \"Dead\"}</span> // Custom cell components!\r\n    },{\r\n      Header: 'App Status',\r\n      accessor: 'application_info',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{(props.value) ? \"Alive\" : \"Dead\"}</span> // Custom cell components!\r\n    },{\r\n    Header: '# Requests',\r\n      accessor: 'application_info.num_requests',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: '# SavedBytes',\r\n      accessor: 'application_info.num_savedBytes',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: '# KeysSaved',\r\n      accessor: 'application_info.num_keys_saved',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: '# Cached',\r\n      accessor: 'application_info.elements_cached',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'CPU Usage',\r\n      accessor: 'machine_info.cpu.usage',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'CPU Idle',\r\n      accessor: 'machine_info.cpu.idle',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Total Mem',\r\n      accessor: 'machine_info.memory.total',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Free Mem',\r\n      accessor: 'machine_info.memory.free',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Buffer Mem',\r\n      accessor: 'machine_info.memory.buffers',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Used Disk',\r\n      accessor: 'machine_info.disk_space.used',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Free Disk',\r\n      accessor: 'machine_info.disk_space.available',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: '1 Min Load',\r\n      accessor: 'machine_info.load.average_1_min',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: '5 Min Load',\r\n      accessor: 'machine_info.load.average_5_min',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: '15 Min Load',\r\n      accessor: 'machine_info.load.average_15_min',\r\n      width: '150',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    }]\r\n   \r\n    return (\r\n      console.log(this.state.d),\r\n      <div>\r\n        <h1>Monitering Dashboard</h1>\r\n        \r\n      { this.state && this.state.d && \r\n          <ReactTable\r\n          data={this.state.d.data[this.state.d.data.length-1].nodes}\r\n          columns={columns}\r\n          getTrProps={this.getTrProps}\r\n        />\r\n      }\r\n      </div>\r\n    )\r\n    }\r\n    \r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}